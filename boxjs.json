/*
Bing积分完整版 - 三合一版本
整合搜索Cookie获取、积分面板Cookie获取、积分任务执行
作者: @ader90520
*/

// 判断执行模式
if (typeof $request !== 'undefined') {
    // 重写模式：获取Cookie
    handleCookieRequest();
} else {
    // 脚本模式：执行积分任务
    executeBingTasks();
}

function handleCookieRequest() {
    const $ = initToolkit();
    
    if ($request.url.includes('rewards.bing.com')) {
        // 积分面板Cookie获取
        const ck = $request.headers["Cookie"];
        $.msg("Bing积分", "🎉面板Cookie获取成功，请禁用重写规则");
        $.log("🎉面板Cookie获取成功");
        $.setdata("bingPointCookieKey", ck);
        $.done();
    } else if ($request.url.includes('cn.bing.com/search')) {
        // 搜索Cookie获取
        const ck = $request.headers["Cookie"];
        if ($request.url.includes('q=pc')) {
            $.msg("Bing搜索", "🎉PC端Cookie获取成功");
            $.setdata("bingSearchCookiePCKey", ck);
        } else if ($request.url.includes('q=testt')) {
            $.msg("Bing搜索", "🎉移动端Cookie获取成功");
            $.setdata("bingSearchCookieMobileKey", ck);
        }
        $.done();
    }
}

async function executeBingTasks() {
    const $ = new Toolkit("Bing积分完整版");
    
    // 读取配置
    const config = {
        resetHours: $.getVal('bingResetHours') || 8,
        pointCookie: $.getVal('bingPointCookieKey'),
        pcCookie: $.getVal('bingSearchCookiePCKey'),
        mobileCookie: $.getVal('bingSearchCookieMobileKey'),
        pcSearchCount: $.getVal('bingPcSearchCount') || 30,
        mobileSearchCount: $.getVal('bingMobileSearchCount') || 20,
        edgeSearchCount: $.getVal('bingEdgeSearchCount') || 10,
        useCnDomain: $.getVal('bingUseCnDomain') !== "false",
        searchInterval: $.getVal('bingSearchInterval') || 5,
        enableDebug: $.getVal('bingEnableDebug') === "true"
    };

    // 状态记录
    const STATE = {
        LAST_EXEC_DATE: 'bingLastExecDate',
        PC_SEARCH_TODAY: 'bingPcSearchToday',
        MOBILE_SEARCH_TODAY: 'bingMobileSearchToday', 
        EDGE_SEARCH_TODAY: 'bingEdgeSearchToday',
        CACHE_POINTS: 'bingCachePoints'
    };

    const todayString = $.formatDate(new Date(), 'yyyyMMdd');
    let searchState = {
        pc: { count: $.getVal(STATE.PC_SEARCH_TODAY) || 0, total: config.pcSearchCount },
        mobile: { count: $.getVal(STATE.MOBILE_SEARCH_TODAY) || 0, total: config.mobileSearchCount },
        edge: { count: $.getVal(STATE.EDGE_SEARCH_TODAY) || 0, total: config.edgeSearchCount }
    };

    // 检查重置条件
    if (!checkResetCondition(config.resetHours, todayString, $, STATE)) {
        $.log("⏰ 今日任务已完成，跳过执行");
        await showCurrentPoints(config.pointCookie, $);
        return;
    }
    
    $.log("🎯 开始执行Bing积分任务");
    
    let totalPoints = 0;
    let taskResults = { points: 0, pc: 0, mobile: 0, edge: 0 };
    
    // 执行积分任务
    if (config.pointCookie) {
        $.log("\n📋 开始积分任务...");
        taskResults.points = await executePointTasks(config.pointCookie, $);
        totalPoints += taskResults.points;
    } else {
        $.log("❌ 未配置积分面板Cookie，跳过积分任务");
    }
    
    // 执行搜索任务
    if (config.pcCookie) {
        $.log("\n💻 开始PC端搜索...");
        taskResults.pc = await executeSearch('pc', searchState.pc, config, $);
        totalPoints += taskResults.pc;
    } else {
        $.log("❌ 未配置PC端Cookie，跳过PC搜索");
    }
    
    if (config.mobileCookie) {
        $.log("\n📱 开始移动端搜索...");
        taskResults.mobile = await executeSearch('mobile', searchState.mobile, config, $);
        totalPoints += taskResults.mobile;
    } else {
        $.log("❌ 未配置移动端Cookie，跳过移动搜索");
    }
    
    if (config.pcCookie) {
        $.log("\n🔵 开始Edge端搜索...");
        taskResults.edge = await executeSearch('edge', searchState.edge, config, $);
        totalPoints += taskResults.edge;
    }
    
    // 保存状态和显示结果
    saveExecutionState(todayString, searchState, $, STATE);
    await showFinalResults(taskResults, totalPoints, config.pointCookie, $);
}

function checkResetCondition(resetHours, todayString, $, STATE) {
    const now = new Date();
    const currentHour = now.getHours();
    const lastExecDate = $.getVal(STATE.LAST_EXEC_DATE);
    
    if (currentHour >= resetHours && lastExecDate !== todayString) {
        $.log("🔄 检测到重置时间，清除昨日状态");
        resetDailyState($, STATE);
        return true;
    }
    
    if (lastExecDate === todayString) {
        return false;
    }
    
    return true;
}

function resetDailyState($, STATE) {
    $.setVal("0", STATE.PC_SEARCH_TODAY);
    $.setVal("0", STATE.MOBILE_SEARCH_TODAY);
    $.setVal("0", STATE.EDGE_SEARCH_TODAY);
}

function saveExecutionState(todayString, searchState, $, STATE) {
    $.setVal(todayString, STATE.LAST_EXEC_DATE);
    $.setVal(searchState.pc.count.toString(), STATE.PC_SEARCH_TODAY);
    $.setVal(searchState.mobile.count.toString(), STATE.MOBILE_SEARCH_TODAY);
    $.setVal(searchState.edge.count.toString(), STATE.EDGE_SEARCH_TODAY);
}

async function executePointTasks(pointCookie, $) {
    let earnedPoints = 0;
    
    try {
        const dashboard = await getDashboard(pointCookie, $);
        if (!dashboard?.dashboard) {
            $.log("❌ 无法获取积分面板");
            return 0;
        }
        
        const tasks = getAvailableTasks(dashboard);
        $.log(`📋 发现 ${tasks.length} 个可用任务`);
        
        for (const task of tasks) {
            const result = await processTask(task, dashboard.rvt, pointCookie, $);
            if (result.success) {
                earnedPoints += result.points;
                $.log(`✅ 完成任务: ${task.title} +${result.points}分`);
            }
            await $.sleep(2000 + Math.random() * 2000);
        }
    } catch (e) {
        $.log("❌ 积分任务执行失败:", e);
    }
    
    return earnedPoints;
}

function getAvailableTasks(dashboard) {
    const tasks = [];
    const promotions = [...(dashboard.dashboard.morePromotions || [])];
    
    if (dashboard.dashboard.promotionalItem) {
        promotions.push(dashboard.dashboard.promotionalItem);
    }
    
    for (const task of promotions) {
        if (task.complete === false && task.pointProgressMax > 0) {
            tasks.push({
                title: task.attributes?.title || "未知任务",
                points: task.pointProgressMax,
                type: task.attributes?.type,
                name: task.name,
                hash: task.hash
            });
        }
    }
    
    return tasks;
}

async function processTask(task, rvt, pointCookie, $) {
    if (task.type === "urlreward") {
        const success = await reportActivity(task, rvt, pointCookie, $);
        return {
            success: success,
            points: success ? task.points : 0
        };
    }
    
    $.log(`⏭️ 跳过任务类型: ${task.type}`);
    return { success: false, points: 0 };
}

async function executeSearch(deviceType, state, config, $) {
    if (state.count >= state.total) {
        $.log(`✅ ${getDeviceName(deviceType)}搜索已完成`);
        return 0;
    }
    
    const remaining = state.total - state.count;
    $.log(`🔍 开始${getDeviceName(deviceType)}搜索，剩余${remaining}次`);
    
    let successCount = 0;
    
    for (let i = 0; i < remaining; i++) {
        const success = await performSingleSearch(deviceType, state.count + i + 1, config, $);
        if (success) {
            successCount++;
            state.count++;
        }
        
        if (i < remaining - 1) {
            await $.sleep(config.searchInterval * 1000);
        }
    }
    
    const pointsEarned = Math.floor(successCount / 3) * 8;
    $.log(`🎉 ${getDeviceName(deviceType)}搜索完成: 成功${successCount}次，获得约${pointsEarned}分`);
    
    return pointsEarned;
}

function getDeviceName(deviceType) {
    const names = { 'pc': 'PC端', 'mobile': '移动端', 'edge': 'Edge端' };
    return names[deviceType] || deviceType;
}

async function performSingleSearch(deviceType, round, config, $) {
    const baseUrl = config.useCnDomain ? "https://cn.bing.com" : "https://www.bing.com";
    const randomWord = generateSearchKeyword();
    const searchUrl = `${baseUrl}/search?q=${encodeURIComponent(randomWord)}&form=QBLH&qs=n`;
    
    const headers = getSearchHeaders(deviceType, config);
    
    try {
        const response = await $.http.get({
            url: searchUrl,
            headers: headers,
            timeout: 10000
        });
        
        if (response.status === 200) {
            if (config.enableDebug) {
                $.log(`✅ ${getDeviceName(deviceType)}第${round}次搜索成功`);
            }
            return true;
        } else {
            $.log(`❌ ${getDeviceName(deviceType)}搜索失败，状态码: ${response.status}`);
            return false;
        }
    } catch (error) {
        $.log(`💥 ${getDeviceName(deviceType)}搜索异常: ${error.message}`);
        return false;
    }
}

function getSearchHeaders(deviceType, config) {
    const baseHeaders = {
        "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "accept-language": "zh-CN,zh;q=0.9,en;q=0.8",
        "cache-control": "no-cache",
        "pragma": "no-cache"
    };
    
    const deviceConfigs = {
        'pc': {
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "cookie": config.pcCookie
        },
        'mobile': {
            "user-agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.3 Mobile/15E148 Safari/604.1",
            "cookie": config.mobileCookie
        },
        'edge': {
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0",
            "cookie": config.pcCookie
        }
    };
    
    return { ...baseHeaders, ...deviceConfigs[deviceType] };
}

function generateSearchKeyword() {
    const prefixes = ['什么是', '如何', '为什么', '最好的', '最新的', '学习', '了解'];
    const topics = ['人工智能', '机器学习', '编程', '科技', '健康', '旅游', '美食', '音乐'];
    const suffixes = ['的方法', '的技巧', '的原理', '的发展', '的应用'];
    
    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
    const topic = topics[Math.floor(Math.random() * topics.length)];
    const suffix = Math.random() > 0.5 ? suffixes[Math.floor(Math.random() * suffixes.length)] : '';
    const randomNum = Math.floor(Math.random() * 1000);
    
    return `${prefix}${topic}${suffix} ${randomNum}`;
}

async function getDashboard(pointCookie, $) {
    if (!pointCookie) return null;
    
    const headers = {
        "authority": 'rewards.bing.com',
        "accept": 'application/json, text/javascript, */*; q=0.01',
        "cookie": pointCookie,
        "user-agent": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    };
    
    try {
        const response = await $.http.get({
            url: `https://rewards.bing.com/?_=${Date.now()}`,
            headers: headers
        });
        
        if (response.status === 200) {
            const data = response.body;
            const rvtMatch = data.match(/__RequestVerificationToken.*?value="([^"]*)"/);
            const dashboardMatch = data.match(/var dashboard = ({[^;]*});/);
            
            if (rvtMatch && dashboardMatch) {
                return {
                    dashboard: JSON.parse(dashboardMatch[1]),
                    rvt: rvtMatch[1]
                };
            }
        }
    } catch (e) {
        $.log("❌ 获取积分面板失败");
    }
    
    return null;
}

async function reportActivity(task, rvt, pointCookie, $) {
    const headers = {
        "authority": 'rewards.bing.com',
        "content-type": 'application/x-www-form-urlencoded',
        "cookie": pointCookie,
        "x-requested-with": 'XMLHttpRequest'
    };
    
    const body = `id=${task.name}&hash=${task.hash}&timeZone=480&activityAmount=1&__RequestVerificationToken=${rvt}`;
    
    try {
        const response = await $.http.post({
            url: `https://rewards.bing.com/api/reportactivity?_=${Date.now()}`,
            headers: headers,
            body: body
        });
        
        return response.status === 200;
    } catch (e) {
        return false;
    }
}

async function showCurrentPoints(pointCookie, $) {
    const dashboard = await getDashboard(pointCookie, $);
    if (dashboard?.dashboard) {
        const points = dashboard.dashboard.userStatus?.availablePoints || "未知";
        $.msg(
            "Bing积分状态",
            `当前积分: ${points}`,
            "今日任务已完成"
        );
    }
}

async function showFinalResults(results, totalPoints, pointCookie, $) {
    const dashboard = await getDashboard(pointCookie, $);
    const currentPoints = dashboard?.dashboard?.userStatus?.availablePoints || "未知";
    
    $.setVal(currentPoints, 'bingCachePoints');
    
    const message = `
任务积分: ${results.points}分
PC搜索: ${results.pc}分  
移动搜索: ${results.mobile}分
Edge搜索: ${results.edge}分
总计获得: ${totalPoints}分
当前积分: ${currentPoints}
    `.trim();
    
    $.msg("Bing积分任务完成", message);
}

// 工具函数
function initToolkit() {
    return {
        msg: (title, subtitle, body) => {
            if (typeof $notification !== 'undefined') {
                $notification.post(title, subtitle, body);
            }
        },
        log: (message) => console.log(message),
        setdata: (key, val) => {
            if (typeof $persistentStore !== 'undefined') {
                return $persistentStore.write(val, key);
            }
            if (typeof $prefs !== 'undefined') {
                return $prefs.setValueForKey(val, key);
            }
        },
        getdata: (key) => {
            if (typeof $persistentStore !== 'undefined') {
                return $persistentStore.read(key);
            }
            if (typeof $prefs !== 'undefined') {
                return $prefs.valueForKey(key);
            }
        },
        done: () => {
            if (typeof $done !== 'undefined') $done();
        }
    };
}

// Toolkit类
function Toolkit(name, id, options) {
    return new class {
        constructor(name, id, options) {
            this.name = name;
            this.id = id;
            this.options = options || {};
            this.logs = [];
            this.startTime = Date.now();
            this.log("", `🔔 ${this.name} 开始执行`);
        }
        
        log(...args) {
            const message = args.join(" ");
            this.logs.push(message);
            console.log(message);
        }
        
        getVal(key, defaultValue = "") {
            if (typeof $persistentStore !== 'undefined') {
                return $persistentStore.read(key) || defaultValue;
            }
            if (typeof $prefs !== 'undefined') {
                return $prefs.valueForKey(key) || defaultValue;
            }
            return defaultValue;
        }
        
        setVal(value, key) {
            if (typeof $persistentStore !== 'undefined') {
                return $persistentStore.write(value, key);
            }
            if (typeof $prefs !== 'undefined') {
                return $prefs.setValueForKey(value, key);
            }
            return true;
        }
        
        msg(title, subtitle, body) {
            if (typeof $notification !== 'undefined') {
                $notification.post(title, subtitle, body);
            }
            this.log(`📢 ${title}: ${subtitle} - ${body}`);
        }
        
        async sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
        
        formatDate(date, fmt) {
            const o = {
                "M+": date.getMonth() + 1,
                "d+": date.getDate(),
                "H+": date.getHours(),
                "m+": date.getMinutes(), 
                "s+": date.getSeconds(),
                "q+": Math.floor((date.getMonth() + 3) / 3),
                "S": date.getMilliseconds()
            };
            if (/(y+)/.test(fmt)) {
                fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
            }
            for (const k in o) {
                if (new RegExp("(" + k + ")").test(fmt)) {
                    fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
                }
            }
            return fmt;
        }
        
        // HTTP请求方法
        http = {
            get: (options) => {
                return new Promise((resolve) => {
                    if (typeof $httpClient !== 'undefined') {
                        $httpClient.get(options, (error, response, body) => {
                            resolve({ error, status: response?.status, body });
                        });
                    } else if (typeof $task !== 'undefined') {
                        $task.fetch(options).then(response => {
                            resolve({ error: null, status: response.statusCode, body: response.body });
                        }, error => {
                            resolve({ error, status: null, body: null });
                        });
                    } else {
                        resolve({ error: "No HTTP client", status: null, body: null });
                    }
                });
            },
            
            post: (options) => {
                return new Promise((resolve) => {
                    if (typeof $httpClient !== 'undefined') {
                        $httpClient.post(options, (error, response, body) => {
                            resolve({ error, status: response?.status, body });
                        });
                    } else if (typeof $task !== 'undefined') {
                        options.method = 'POST';
                        $task.fetch(options).then(response => {
                            resolve({ error: null, status: response.statusCode, body: response.body });
                        }, error => {
                            resolve({ error, status: null, body: null });
                        });
                    } else {
                        resolve({ error: "No HTTP client", status: null, body: null });
                    }
                });
            }
        };
    }(name, id, options);
}